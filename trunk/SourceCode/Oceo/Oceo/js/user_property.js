/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012
 *
 */



/// <summary>
/// Implementations of sladvertisings represent a Advertising
///
/// </summary>
var property = {
    //region PRESERVE ExtraMethods For Article
    //endregion
    //region Contants	
    ACT_ADD: 10,
    ACT_UPDATE: 11,
    ACT_DELETE: 12,
    ACT_CHANGE_PAGE: 13,
    ACT_SHOW_EDIT: 14,
    ACT_GET: 15,
    ACT_ACTIVE: 16,
    Page: "admin_property.php",
	
	showPopupAdd: function(modalID)
	{
        //alert('Show form');
		property.clearForm();
		core.util.getObjectByClass('ckCreateOther').show();
		
		$('#'+modalID).modal({ backdrop: 'static', keyboard: false });
	},
	
	showPopupEdit: function(propertyID, modalID)
	{
		
		core.util.getObjectByID('adddocmode').val(1);
		core.util.getObjectByID('PropertyID').val(propertyID);
		propertyInfo = {
			id : propertyID,
			act: this.ACT_SHOW_EDIT
		}
		core.request.post(this.Page,propertyInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.util.getObjectByClass('ckCreateOther').hide();
					core.util.getObjectByClass('popup-title').html('Edit Property');
					//console.log(strRespond[1]['content']);
					var propertyRespone = $.parseJSON(strRespond[1]['content']);
					property.bindingAdForm(propertyRespone);
					$('#'+modalID).modal({ backdrop: 'static', keyboard: false });
					 core.ui.hideInfoBar();	
                }
                else{
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);						
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);					
            }
        );
		
	},
	
	bindingAdForm: function(property)
	{
	  
		var controlID = 'txtProName';		
		core.util.getObjectByID(controlID).val(property.PropertyName);
		
		controlID = 'cmdGroup';		
		core.util.getObjectByID(controlID).val(property.PropertyGroupID);
		
		controlID = 'cmdDataType';		
		core.util.getObjectByID(controlID).val(property.DataTypeID);
		
		controlID = 'txtPropertyValue';		
		core.util.getObjectByID(controlID).val(property.PropertyValue);
		
		controlID = 'txtOrder';		
		core.util.getObjectByID(controlID).val(property.Order);	
	},
	
	getPropertyInfo: function(submitID) {
		
 	    isValid =  true;
        core.util.disableControl(submitID, true);
   
		var controlID = 'txtProName';		
		var proName = core.util.getObjectValueByID(controlID);
	    core.util.validateInputTextBox(controlID,'');	
        if(core.util.isNull(proName))
        {
            core.util.validateInputTextBox(controlID,'Property is empty');
            isValid =  false;
        }
        
		controlID = 'cmdGroup';		
		var propertyGroupID = core.util.getObjectValueByID(controlID);
			
        controlID = 'cmdDataType';		
		var dataTypeID = core.util.getObjectValueByID(controlID);	
    
		controlID = 'txtPropertyValue';		
		var propertyValue = core.util.getObjectValueByID(controlID);
		
		controlID = 'txtOrder';	        
		var order = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID,'');
        if(core.util.isNull(order) == false && $.isNumeric(order) == false)
        {
            core.util.validateInputTextBox(controlID,'Order is not a numberic');
            isValid =  false;
        }
        
        if (isValid == false) {
			core.util.disableControl("btnOK", false);
            return;
        }
		var propertyInfo = 
		{
			 PropertyName: proName,		
			 PropertyGroupID: propertyGroupID,
			 DataTypeID: dataTypeID,
			 Order: order,
			 PropertyValue: propertyValue,			
			 PropertyID: core.util.getObjectValueByID('PropertyID'),
			 Mode: core.util.getObjectValueByID('adddocmode')
		};
		return propertyInfo;
    },
	
	clearForm: function()
	{
	   
       	var controlID = 'txtProName';		
		core.util.clearValue(controlID);
		
		controlID = 'cmdGroup';		
		core.util.clearValue(controlID);
			
        controlID = 'cmdDataType';		
		core.util.clearValue(controlID);	
    
		controlID = 'txtPropertyValue';		
		core.util.clearValue(controlID);
		
		controlID = 'txtOrder';		
		core.util.clearValue(controlID);
	
		core.util.getObjectByID('adddocmode').val(0);
		core.util.getObjectByID('PropertyID').val('');
	},
	
    addProperty: function() { 
		var submitID = "btnSave"
        var propertyInfo = this.getPropertyInfo(submitID);
		if(core.util.isNull(propertyInfo))
		{
			return false;
		}
		if(propertyInfo.Mode=='1' || propertyInfo.Mode==1)
		{
			propertyInfo.act = this.ACT_UPDATE;
		}
		else
		{
			propertyInfo.act = this.ACT_ADD;
		}
		
		core.request.post(this.Page,propertyInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
					property.clearForm();
					core.util.disableControl(submitID, false);
                    if(core.util.isChecked("ckCreateOther") == false)
					   core.util.reload();
                }
                else{
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);	
					core.util.disableControl(submitID, false);
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(submitID, false);
            }
        );
    },
    delete: function(objID,status) { 
		var submitID = "btnSave"
        var infoRequest ={};	
	    infoRequest.act = this.ACT_DELETE;
        infoRequest.PropertyID = objID;
        infoRequest.Status = status;
		
		core.request.post(this.Page,infoRequest,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);					
					core.util.disableControl(submitID, false);      
                    core.util.reload();            
                }
                else{
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);	
					core.util.disableControl(submitID, false);
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(submitID, false);
            }
        );
    }
}

