/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012
 *
 */



/// <summary>
/// Implementations of slarticles represent a Article
///
/// </summary>
var product = {		   
	//region PRESERVE ExtraMethods For Article
	//endregion
    //region Contants	
    ACT_ADD : 10,
    ACT_UPDATE : 11,
    ACT_DELETE : 12,
    ACT_CHANGE_PAGE : 13,
    ACT_SHOW_EDIT : 14,
    ACT_GET : 15,
    ACT_ACTIVE : 16,
    ACT_REFRESH : 17,
    ACT_CLONE : 18,
    Page : "bg_product.php",
    
   
    //endregion   
    
    //region Public Functions
    
    getProductInfo: function() {
        core.util.disableControl("btnOK", true);
        var isValid = true;
	
		controlID = 'cmArea';		
		var areas = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(areas)){
			 core.util.validateInputTextBox(controlID,'Bạn chưa chọn lĩnh vực', isValid);
			isValid =  false;
		}
		
		controlID = 'cmCategory';		
		var categories = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(categories)){
			 core.util.validateInputTextBox(controlID,'Bạn chưa chọn danh mục', isValid);
			isValid =  false;
		}
		
		controlID = 'cmManufactory';		
		var manufactory = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(manufactory)){
			 core.util.validateInputTextBox(controlID,'Bạn chưa chọn nhà sản xuất', isValid);
			isValid =  false;
		}
		
		
		controlID = 'txtName';		
		var productName = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(productName)){
			core.util.validateInputTextBox(controlID,'Tên sản phẩm không được rỗng', isValid);
			isValid =  false;
		}else if (productName.length > 255) {
			 core.util.validateInputTextBox(controlID,'Tên sản phẩm phải ngắn hơn 255', isValid);
			isValid =  false;
		}
		var btnAdd = core.util.getObjectByClass('property-product .btn-add');
		btnAdd.click();
		controlID = 'txtPropertyValue';
		core.util.validateInputTextBox(controlID,'');
		var properties= [];
	  
	  
		var propertyGroupID='';
		var propertyID = '';
		var propertyValue = '';
		var status = 0;//property no important
		if(core.util.getObjectByClass('property-group').length >=1 )
		{
			$('.property-group').each(function(){
				var propertyGroupID = $(this).attr('lbGroupPropertyID');
				if(typeof(propertyGroupID) == 'undefined' || propertyGroupID== 'undefined' || propertyGroupID=='')
				{
				    //get new property group name
				    propertyGroupID = $(this).attr('lbGroupPropertyName')
				}
				$(this).find('.row-item').each( function(){
				    status = 0;
				    propertyID = $(this).find('.property-id').attr('lbpropertyid');
				    if(typeof(propertyID) == 'undefined' || propertyID== 'undefined' || propertyID=='')
				    {
				        //get new property name
				        propertyID = $(this).find('.property-id').text();
				    }
				    propertyValue = $.trim($(this).find('.property-value').text());
				    if($.trim($(this).find('.prop-important').text()) != '')
				    {
				        status = 1;
				    }
                    property = 
                    {
                        PropertyGroupID: propertyGroupID,
                        PropertyID: propertyID,
                        PropertyValue: propertyValue,
                        Status: status
                    };
                    properties.push(property);
				});
			})
		}

        controlID = 'txtContent';		
		var content = CKEDITOR.instances[controlID].getData()
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(content)){
			core.util.validateInputTextBox(controlID,'Thông tin sản phẩm không được rỗng', isValid);
			isValid =  false;
		}

		/*if(!core.util.isChecked("chkTerm")){		 
            core.util.validateInputTextBox('chkTerm', 'Bạn cần phải đồng ý điều khoản sử dụng', isValid);
            isValid = false;
        }*/
		
        if (isValid == false) {
			core.util.disableControl("btnOK", false);
            return;
        }
		var productInfo = 
		{
		    Description: content,
            CatalogueID: categories,			 
            ManufactoryID: manufactory,
            ProductName: productName,
            ImageLink: core.util.getObjectValueByID('txtImage'),
            Properties: properties,
            ProductID: core.util.getObjectValueByID('ProductID'),
            Mode: core.util.getObjectValueByID('adddocmode')
		};
		
		
		return productInfo;
    },
	
	postProduct: function() {  
	    var productInfo = this.getProductInfo();
	    
		if(core.util.isNull(productInfo))
		{
			return false;
		}
		if(productInfo.Mode=='1' || productInfo.Mode==1)
		{
			productInfo.act = this.ACT_UPDATE;
		}
		else
		{
			productInfo.act = this.ACT_ADD;
		}
			
        core.request.post(this.Page,productInfo,
            function(respone, info){
                console.log(info);
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
					//core.util.goTo("PostSucess.php");
					//article.clearForm();
					core.util.disableControl("btnOK", false);
					//if(articleInfo.Mode=='1' || articleInfo.Mode==1)
					//{
					//	core.util.redirect('profile_article.php')
					//}
                }
                else{
                   core.ui.showInfoBar(2, strRespond[1]["inf"]);	
					core.util.disableControl("btnOK", false);
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl("btnOK", false);
            }
        );
    },
	
	cloneProduct: function(productID) {  
	    var productInfo = {
	        ProductID:productID
	    };
	    
		if(core.util.isNull(productInfo))
		{
			return false;
		}
		
		productInfo.act = this.ACT_CLONE;
			
        core.request.post(this.Page,productInfo,
            function(respone, info){
                console.log(info);
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
				    core.util.reload();
                }
                else{
                   core.ui.showInfoBar(2, strRespond[1]["inf"]);	
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
            }
        );
    },
	
	clearForm: function()
	{
		controlID = 'cmArea';	
		core.util.deSelectOption(controlID);
		
		
		controlID = 'cmCategory';	
		core.util.deSelectOption(controlID);		
		
		controlID = 'cmManufactory';	
		core.util.deSelectOption(controlID);	
		
		controlID = 'txtName';		
		core.util.clearValue(controlID);	
		
		controlID = 'txtImage';		
		core.util.clearValue(controlID);		
		
		controlID = 'optGroup';		
		core.util.deSelectOption(controlID);
		controlID = 'optProperty';		
		core.util.deSelectOption(controlID);
		
			
		controlID = 'txtPropertyValue';		
		core.util.clearValue(controlID);		
		
		$('.property-group').remove();
					
		controlID = 'txtContent';		
		var content = CKEDITOR.instances[controlID].setData('');
		
				
	},
	
	addProperty: function(obj) {
		var root = $('div.property-product');
		var parent = $(obj).parent();
		var	propertyValue = core.util.getObjectValueByID('txtPropertyValue');
		propertyValue = core.util.removeAll(propertyValue,"'");
		propertyValue = core.util.removeAll(propertyValue,"\"");
		var	group =  $('#optGroup option:selected').text();
		group = core.util.removeAll(group,"'");
		group = core.util.removeAll(group,"\"");
		var	propertyID = $('#optProperty option:selected').val();
		var	propertyName = $('#optProperty option:selected').text();
		propertyName = core.util.removeAll(propertyName,"'");
		propertyName = core.util.removeAll(propertyName,"\"");
		core.util.validateInputTextBox('txtPropertyValue','');
		
		selecteProperty = $('#optProperty option:selected');
		if (typeof("selecteProperty") != 'undefined')
		{
		    switch(selecteProperty.attr("datatype"))
		    {
		        case core.dataType.Number:
		        {
		            if($.isNumeric(propertyValue) == false)
		            {
		                core.util.validateInputTextBox('txtPropertyValue','Dữ liệu nhập không hợp lệ');
		                return;
		            }
		        }
		    }
		}
		
		if (propertyValue == '') {
			core.util.validateInputTextBox('txtPropertyValue','Bạn chưa nhập giá trị thuộc tính');
			return;
		}
		var classNoborder ='';
		if(core.util.getObjectByClass('property-product-value').length <1)
		{
			classNoborder ='no-border';
		}
		isImportant = $('#ckImportant').is(':checked');
		//selecteGroup = $('#optGroup option:selected');
		var propImportant = '';
		if(isImportant)
		{
		    propImportant = " <span class='prop-important'> * </span> ";
		}
		else
		{
		    propImportant = " <span class='prop-important'></span> ";
		}
		var isExistedGroup = false;
        $(".property-group h2.property-zone").each(function(){
            if($(this).html() == group)
            {
                var newRow = $('<div class="controls row-item clear">'+
						'<label class="m-wrap inline span4 lbl-property">'+
							 '<span class="property-id" lbPropertyID="'+propertyID+'">'+propertyName+'</span>: <span class="property-value"> '+propertyValue+'</span>'+ propImportant+
						'</label>'+
						'<a onclick="product.moveUpItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						'<a onclick="product.moveDownItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
						'<a onclick="product.clickEDIT(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Sửa</a> '+
						'<a onclick="product.clickDELETE(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-remove"></i> Xóa</a>'+
					'</div>');
                $(this).closest('.property-group').append(newRow);
                isExistedGroup= true;
                
            }
        });
		if(!isExistedGroup)
		{
		    var newRow = $('<div class="control-group zone property-group" lbGroupPropertyID="'+selecteProperty.attr('PropertyGroupID')+'" lbGroupPropertyName="'+group+'">'+
					        '<div class="controls">'+
						        '<h2 class="m-wrap property-zone float-left">'+group+'</h2>'+
						        '<a onclick="product.moveUpItem(this,\'property-group\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						        '<a onclick="product.moveDownItem(this,\'property-group\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
					        '</div>'+
					        '<div class="controls row-item clear">'+
						        '<label class="m-wrap inline span4 lbl-property">'+
							        '<span class="property-id" lbPropertyID="'+propertyID+'">'+propertyName+'</span>: <span class="property-value"> '+propertyValue+'</span>'+ propImportant+
						        '</label>'+
						        '<a onclick="product.moveUpItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						        '<a onclick="product.moveDownItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
						        '<a onclick="product.clickEDIT(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Sửa</a> '+
						        '<a onclick="product.clickDELETE(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-remove"></i> Xóa</a>'+
					        '</div>'+
				        '</div>	');
		    root.append(newRow);
		}
		$('#optProperty option[value="'+propertyID+'"]').attr("isUsed","true");
		$('#optProperty option[value="'+propertyID+'"]').hide();
		$('#optProperty').trigger("liszt:updated");
		core.util.focusControl('txtPropertyValue');
		this.clearInputProperty();
	},
	
	updateProperty: function (obj) {
		var root = $('div.property-product');
		var parent = $(obj).parent();
		var	propertyValue = core.util.getObjectValueByID('txtPropertyValue');
		propertyValue = core.util.removeAll(propertyValue,"'");
		propertyValue = core.util.removeAll(propertyValue,"\"");
		var	group =  $('#optGroup option:selected').val();
		var	groupName =  $('#optGroup option:selected').text();
		var	propertyName = $('#optProperty option:selected').text();
		propertyName = core.util.removeAll(propertyName,"'");
		propertyName = core.util.removeAll(propertyName,"\"");
		var	propertyID = $('#optProperty option:selected').val();
		core.util.validateInputTextBox('txtPropertyValue','');
		
		selecteProperty = $('#optProperty option:selected');
		//selecteGroup = $('#optGroup option:selected');
		
		if (propertyValue == '') {
			core.util.validateInputTextBox('txtPropertyValue','Bạn chưa nhập giá trị thuộc tính');
			return;
		}
		if (typeof("selecteProperty") != 'undefined')
		{
		    switch(selecteProperty.attr("datatype"))
		    {
		        case core.dataType.Number:
		        {
		            if($.isNumeric(propertyValue) == false)
		            {
		                core.util.validateInputTextBox('txtPropertyValue','Dữ liệu nhập không hợp lệ');
		                return;
		            }
		        }
		    }
		}
		var rowUpdate = root.find('.row-item.updating');
		var oldGroup = $.trim($(rowUpdate).closest('.property-group').attr('lbGroupPropertyID'));
		isImportant = $('#ckImportant').is(':checked');
		//selecteGroup = $('#optGroup option:selected');
		
		var propImportant = '';
		if(isImportant)
		{
		    propImportant = " <span class='prop-important'> * </span> ";
		}
		else
		{
		    propImportant = " <span class='prop-important'></span> ";
		}
		if(oldGroup != group)
		{
		   root.find('.row-item.updating').remove();
		   if($(rowUpdate).closest('.property-group').find('.row-item').length < 1)
		   {
		        $(root).find('.property-group[lbGroupPropertyID="'+oldGroup+'"]').remove();
		        var existedGroup = $(root).find('.property-group[lbGroupPropertyID="'+group+'"]');
		        if(existedGroup.length > 0)
		        {
		          
		             var newRow = $('<div class="controls row-item clear">'+
						'<label class="m-wrap inline span4 lbl-property">'+
							 '<span class="property-id" lbPropertyID="'+propertyID+'">'+propertyName+'</span>: <span class="property-value"> '+propertyValue+'</span>'+propImportant +
						'</label>'+
						'<a onclick="product.moveUpItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						'<a onclick="product.moveDownItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
						'<a onclick="article.clickEDIT(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Sửa</a> '+
						'<a onclick="article.clickDELETE(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-remove"></i> Xóa</a>'+
					'</div>');
                    $(existedGroup).closest('.property-group').append(newRow);
		        }
		        else
		        {
		              var newRow = $('<div class="control-group zone property-group" lbGroupPropertyID="'+group+'" lbGroupPropertyName="'+groupName+'">'+
					                '<div class="controls">'+
						                '<h2 class="m-wrap property-zone float-left">'+groupName+'</h2>'+
						                '<a onclick="product.moveUpItem(this,\'property-group\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						                '<a onclick="product.moveDownItem(this,\'property-group\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
					                '</div>'+
					                '<div class="controls row-item clear">'+
						                '<label class="m-wrap inline span4 lbl-property">'+
							                '<span class="property-id" lbPropertyID="'+propertyID+'">'+propertyName+'</span>: <span class="property-value"> '+propertyValue+'</span>'+
						                '</label>'+
						                '<a onclick="product.moveUpItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:;"><i class="icon-pencil"></i> Lên</a> '+
						                '<a onclick="product.moveDownItem(this,\'row-item\')" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Xuống</a> '+
						                '<a onclick="product.clickEDIT(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-pencil"></i> Sửa</a> '+
						                '<a onclick="product.clickDELETE(this);" class="btn btn-mini float-right" href="javascript:void(0);"><i class="icon-remove"></i> Xóa</a>'+
					                '</div>'+
				                '</div>	');
		            root.append(newRow);
		        }
		   } 
		  
		}
		else
		{
		    rowUpdate.find('.property-id').attr('lbPropertyID',propertyID);
		    rowUpdate.find('.property-id').html(propertyName);
		    
		    rowUpdate.find('.property-value').html(propertyValue);
		    if(isImportant)
		    {
		        rowUpdate.find('.prop-important').html(' * ');
		        //propImportant = " <span class='prop-important'>*</span> ";
		    }
		    else
		    {
		         rowUpdate.find('.prop-important').html('');
		    }
		    
    		
		    this.clearInputProperty();		
		    this.showEditMode(false);
		    root.find('.row-item').removeClass('updating');
		}
	},
	
	clickEDIT: function (obj) {
		
		var root = $('div.property-product');
		var parent = $(obj).parent();
		root.find('.row-item').removeClass('updating');
		parent.addClass("updating");
		var group =  $.trim($(obj).closest('.property-group').attr('lbGroupPropertyID'));
		var property =  $.trim(parent.find('.property-id').attr('lbPropertyID'));
		var propertyName =  $.trim(parent.find('.property-id').html());
		var propertyValue =  $.trim(parent.find('.property-value').html());
		var important = $.trim(parent.find('.prop-important').html());
		var isImportant =false;
		if(important != "")
		{
		    isImportant= true;
		}
		//console.log("prop:"+isImportant+":"+important);
		$('#ckImportant').prop('checked', isImportant);
		core.util.getObjectByID('txtPropertyValue').val(propertyValue);
		optCity = core.util.getObjectByID('optGroup').find('option');
		$("#optGroup option[value='"+group+"']").attr("selected", "selected");
		$("#optGroup").trigger("liszt:updated");
		$("#optGroup").change();
		
		$('#optProperty option[isUpdate="true"]').hide();
		$('#optProperty option[value="'+property+'"]').attr("isUpdate","true");
		$('#optProperty option[value="'+property+'"]').attr("selected","selected");
		$('#optProperty option[value="'+property+'"]').show();
		
		//var newOpt= $('<option isUpdate="true" value="'+property+'" selected=selected PropertyGroupID="'+group+'" >'+propertyName+'</option>');
		//$('#optProperty').append(newOpt);
		//core.util.getObjectByID('optProperty').val(property);		
		$("#optProperty").trigger("liszt:updated");
		$('#optProperty').change();
		
		this.showEditMode(true);
	},	
	
	clickDELETE: function (obj) {
		var root =  $(obj).closest('.property-group');
		var parent = $(obj).parent();
		var	propertyName = $(parent).find('.property-id').text();
		propertyName = core.util.removeAll(propertyName,"'");
		var property =  $.trim(parent.find('.property-id').attr('lbPropertyID'));
		var group =  $.trim($(obj).closest('.property-group').attr('lbGroupPropertyID'));
		$('<div></div>').appendTo('body')
		  .html('<div><span class="icon icon-warning-sign"></span><h6>Bạn đang xóa thuộc tính '+ propertyName +'?</h6></div>')
		  .dialog({
			  modal: true,
			  title: 'Thông báo', 
			  zIndex: 10000, 
			  autoOpen: true,
			  width: '320px', 
			  resizable: false,
			  dialogClass: 'ui-dialog-yellow',
			  buttons: [
				{
					'class' : 'btn red',	
					"text" : "Xóa",
					click: function() {
					   
		                $('#optProperty option[value="'+property+'"]').attr("isUpdate","");
		                $('#optProperty option[value="'+property+'"]').attr("isUsed","");
		                $('#optProperty option[value="'+property+'"]').attr("selected","");
		                $("#optGroup").change();
                        parent.remove();
                        if($(root).find('.row-item').length < 1)
                        {
                            $(root).remove();
                        }
                        $(this).dialog( "close" );
					}
				},
				{
					'class' : 'btn btn-gray',
					"text" : "Không",
					click: function() {
						$(this).dialog( "close" );
					}
				}
			  ],
			  open: function(event, ui) { 
					//hide close button.
					$(this).parent().children().children('.ui-dialog-titlebar-close').hide();
				},
			  close: function (event, ui) {
				  $(this).remove();
			  }
		});		
		
	},
	
	clearInputProperty: function()
	{
		$('#ckImportant').prop('checked', false);
		core.util.clearValue('txtPropertyValue');
		$('#txtPropertyValue').typeahead("destroy");
		$('.typeahead').trigger('blur');
		//core.util.deSelectOption('optGroup');
		$('#optProperty option[isUpdate="true"]').hide();
		core.util.deSelectOption('optProperty');
		//core.util.hideOptions('optProperty');
	},
	
	showEditMode: function(isEdit)
	{
		var root = $('div.property-product');
		if(isEdit)
		{
			root.find('.btn-add').removeClass("display").addClass("no-display");
			root.find('.btn-update').removeClass("no-display").addClass("display");
			root.find('.btn-cancel').removeClass("no-display").addClass("display");
		}else
		{
			root.find('.btn-add').removeClass("no-display").addClass("display");
			root.find('.btn-update').removeClass("display").addClass("no-display");
			root.find('.btn-cancel').removeClass("display").addClass("no-display");
		}
	},
	
	cancelProperty: function (obj) {
		this.clearInputProperty();
		this.showEditMode(false);
		var root = $('div.property-product');
	    root.find('.row-item').removeClass('updating');
	},
	
	loadMap: function(addresses,districts, cities)
	{		
		var addresses = addresses.split(';');
		var districts = districts.split(';');
		var cities = cities.split(';');
		var map = new GMaps({
				el: '#map-article',
				lat: core.constant.LatDefault,
				lng: core.constant.LongDefault,
				
                zoomControl : true,
			    zoomControlOpt: {
                    style : 'SMALL',
                    position: 'TOP_LEFT'
                },
                panControl : true
			});
	
		for(i=0;i<addresses.length;i++)
		{
			if(addresses[i] != 'undefined' && addresses[i] != '')
			{
				var location = addresses[i] + ', ' + districts[i] + ', ' + cities[i];	
				
				GMaps.geocode({
				  address: location,
				  callback: function(results, status){
					if(status=='OK'){
						var latlng = results[0].geometry.location;
						google.maps.event.trigger(map, "resize");
						map.setCenter(latlng.lat(), latlng.lng());
						map.addMarker({
							lat: latlng.lat(),
							lng: latlng.lng()
						});
						
					}
				  }
				});
			}
		}
	},
	
	moveUpItem:function(obj,itemName)
	{
	    me = this;
	    currentGroup = $(obj).closest('.'+itemName);
	    nextGroup = $(currentGroup).prev('.'+itemName);
	    currentGroup.insertBefore(nextGroup)
	    
	    
	},
	
	moveDownItem:function(obj,itemName)
	{
	    me = this;
	    currentGroup = $(obj).closest('.'+itemName);
	    nextGroup = $(currentGroup).next('.'+itemName);
	    currentGroup.insertAfter(nextGroup)
	    
	    
	},
	
	
	bindGroup: function(obj,controlID,attName)
	{
		me = this;
	
		var selectedCity = $(obj).find("option:selected");
		var attValue = selectedCity.attr(attName);
		control = core.util.getObjectByID(controlID);
		control.val('');
		var elementOpts = control.find("option");
		elementOpts.each(function(index){
			if($(this).attr(attName) != "0")
			{
				if($(this).attr(attName) == attValue )
				{
					$(this).css("display","block");
				}
				else
				{
					$(this).hide();
				}
			}
		});
		
		$("#"+controlID+" option["+attName+"=0]").attr('selected', 'selected');
		control.trigger("liszt:updated");
	},
	
	bindValueField: function(obj,controlID)
	{
		me = this;
		var selectedProperty = $(obj).find("option:selected");
		suffix = $(selectedProperty).attr("Suffix");
		values = $(selectedProperty).attr("Values");
	    if(typeof(suffix) != 'undefined' && suffix!='')
	    {
	        $("#lbSuffix").text(suffix);
	    }
	    else
	    {
	        $("#lbSuffix").text('');
	    }
        $("#"+controlID).val('');
	    $("#"+controlID).typeahead("destroy");
	    if(typeof(values) != 'undefined' && values!='')
	    {
	        arrValue = values.split(',');
            $("#"+controlID).typeahead({
                minLength: 0,
                source: arrValue
            });
            $("#"+controlID).on('focus', $("#"+controlID).typeahead.bind( $("#"+controlID), 'lookup')); 
	    }
	    else
	    {
	         //$("#"+controlID).typeahead("destroy");
	    }
	},
	
	
	activeArticle: function(articleID,isActivate)
	{
		var articleInfo = 
		{
			 id: articleID,
			 isactivate: isActivate
		};
		
		articleInfo.act = this.ACT_ACTIVE;
		
        core.request.post('../'+this.Page,articleInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
					core.util.reload();
                }
                else{
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);	
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
            }
        );
	},
	refreshProduct: function(articleID,isActivate)
	{
		var productInfo = 
		{
			 id: articleID
		};
		
		productInfo.act = this.ACT_REFRESH;
		
        core.request.post('../'+this.Page,productInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
                }
                else{
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);	
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
            }
        );
	},
	validateKeyword: function()
	{
		var isValid =true;
		controlID = 'txtkeyword';		
		var keyword = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID,'');
		if(core.util.isNull(keyword)){
			//core.util.validateInputTextBox(controlID,'Xin hãy nhập từ khóa tìm kiếm', isValid);
			//isValid =  false;
		}else if (keyword.length > 50) {
			 core.util.validateInputTextBox(controlID,'Từ khóa tìm kiếm quá dài', isValid);
			isValid =  false;
		}
		if(isValid)
		{
			core.util.getObjectByID("formSearch").submit();
		}
	},	
	
	showMap: function(obj)
	{		
		/*
		$modal.on('click', '.update', function(){
		  $modal.modal('loading');
		  setTimeout(function(){
		    $modal
		      .modal('loading')
		      .find('.modal-body')
		        .prepend('<div class="alert alert-info fade in">' +
		          'Updated!<button type="button" class="close" data-dismiss="alert"></button>' +
		        '</div>');
		  }, 1000);
		}); 
		*/
		
		var parent = $(obj).parent();
		var address =  $.trim(parent.find('.location-address').html());
		var city =  $.trim(parent.find('.location-city').html());
		var district =  $.trim(parent.find('.location-district').html());
		var location = address + ', ' + district + ', ' + city;
		
		$('#popup-location').modal();
		$('#popup-location').on('shown', function () {
			var map = new GMaps({
				el: '#map',
				lat: core.constant.LatDefault,
				lng: core.constant.LongDefault
			});
			GMaps.geocode({
			  address: location,
			  callback: function(results, status){
				if(status=='OK'){
					var latlng = results[0].geometry.location;
					google.maps.event.trigger(map, "resize");
					map.setCenter(latlng.lat(), latlng.lng());
					map.addMarker({
						lat: latlng.lat(),
						lng: latlng.lng()
					});
					
				}
			  }
			});
			/*GMaps.geocode({
			  address: "1 Bui Thi Xuan, Quan 1, HCM",
			  callback: function(results, status){
				if(status=='OK'){
					var latlng = results[0].geometry.location;
					google.maps.event.trigger(map, "resize");
					map.setCenter(latlng.lat(), latlng.lng());
					map.addMarker({
						lat: latlng.lat(),
						lng: latlng.lng()
					});
					
				}
			  }
			});
			*/			
		})
		
	},
}
