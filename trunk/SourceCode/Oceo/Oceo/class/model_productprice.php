<?php
/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012 
 *
 */

/* <summary>
 * Implementations of slproductprices represent a ProductPrice
 * </summary>
 */
class Model_ProductPrice
{		   
	#region PRESERVE ExtraMethods For ProductPrice
	#endregion
	#region Contants	
	const ACT_ADD							= 10;
	const ACT_UPDATE						= 11;
	const ACT_DELETE						= 12;
	const ACT_CHANGE_PAGE					= 13;
	const ACT_SHOW_EDIT                     = 14;
	const ACT_GET                           = 15;
	const NUM_PER_PAGE                      = 15;  
	
	const TBL_SL_PRODUCT_PRICE			            = 'sl_product_price';
	
	const SQL_INSERT_SL_PRODUCT_PRICE		= 'INSERT INTO `{0}`
		(
		`ProductPriceID`,
		`ProductID`,
		`Retailer`,
		`ProductLink`,
		`TypeID`,
		`Order`,
		`StatusID`,
		`Status`
		)
		VALUES (
		\'{1}\', \'{2}\', \'{3}\', \'{4}\', \'{5}\', \'{6}\', \'{7}\', \'{8}\'
		);';
	
	const SQL_UPDATE_SL_PRODUCT_PRICE		= 'UPDATE `{0}`
		SET  
		`ProductPriceID` = \'{1}\',
		`ProductID` = \'{2}\',
		`Retailer` = \'{3}\',
		`ProductLink` = \'{4}\',
		`TypeID` = \'{5}\',
		`Order` = \'{6}\',
		`StatusID` = \'{7}\',
		`Status` = \'{8}\'
		WHERE `ProductPriceID` = \'{1}\'  ';
	
	
	const SQL_CREATE_TABLE_SL_PRODUCT_PRICE		= 'CREATE TABLE `{0}` (
		
		`ProductPriceID` ,
		`ProductID` ,
		`Retailer` varchar(50),
		`ProductLink` varchar(256),
		`TypeID` ,
		`Order` ,
		`StatusID` ,
		`Status` varchar(20),
		PRIMARY KEY(ProductPriceID)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';
	
	#endregion   
	
	#region Variables
	var $_objConnection;
	#end region
	
	#region Contructors
	/**
	*  Phuong th?c kh?i t?o d?i tu?ng faq d?ng th?i t?o connection d?n db
	*
	* @param object $objConnection ??i tu?ng k?t n?i d?n db
			
	* @return void 
	*
	*/
	public function  Model_ProductPrice($objConnection)
	{
		$this->_objConnection = $objConnection; 
		
	}
	#region
	
	#region Public Functions
	
	public function insert( $productid,$retailer,$productlink,$typeid,$order,$statusid,$status)
	{
		$intID = global_common::getMaxValueofField($this->_objConnection,global_mapping::ProductPriceID,self::TBL_SL_PRODUCT_PRICE);
		$intID  = $intID + 1;
		$strTableName = self::TBL_SL_PRODUCT_PRICE;
		$strSQL = global_common::prepareQuery(self::SQL_INSERT_SL_PRODUCT_PRICE,
				array(self::TBL_SL_PRODUCT_PRICE,$intID,
					global_common::escape_mysql_string($productid),
					global_common::escape_mysql_string($retailer),
					global_common::escape_mysql_string($productlink),
					global_common::escape_mysql_string($typeid),
					global_common::escape_mysql_string($order),
					global_common::escape_mysql_string($statusid),
					global_common::escape_mysql_string($status)
					));
		
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_PRODUCT_PRICE,$this->_objConnection,$strTableName))
		{
			echo $strSQL;
			global_common::writeLog('Error add sl_product_price:'.$strSQL,1);
			return false;
		}	
		return $intID;
		
	}
	
	public function update($productpriceid,$productid,$retailer,$productlink,$typeid,$order,$statusid,$status)
	{
		$strTableName = self::TBL_SL_PRODUCT_PRICE;
		$strSQL = global_common::prepareQuery(self::SQL_UPDATE_SL_PRODUCT_PRICE,
				array($strTableName,
					global_common::escape_mysql_string($productpriceid),
					global_common::escape_mysql_string($productid),
					global_common::escape_mysql_string($retailer),
					global_common::escape_mysql_string($productlink),
					global_common::escape_mysql_string($typeid),
					global_common::escape_mysql_string($order),
					global_common::escape_mysql_string($statusid),
					global_common::escape_mysql_string($status)
					));
		
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_PRODUCT_PRICE,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add sl_product_price:'.$strSQL,1);
			return false;
		}	
		return $productpriceid;		
	}
	
	public function getProductPriceByID($objID, $selectField='*') 
	{		
		$selectField = $selectField? $selectField : '*'; 
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_PRODUCT_PRICE ,							
					'WHERE ProductPriceID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_product_price ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult[0];
	}
	
	public function getProductPriceByProduct($objID, $selectField='*') 
	{		
		$selectField = $selectField? $selectField : '*'; 
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_PRODUCT_PRICE ,							
					'WHERE ProductID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_product_price ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		
		$objStatus = new Model_Status($this->_objConnection);
		$allStatus = $objStatus->getAllStatus();
		$statuses = array();
		foreach($allStatus as $key => $info)
		{
			$statuses[$info[global_mapping::StatusID]]=$info;
			unset($allStatus[$key]);
		}	
		
		//print_r($statuses);
		$count = count($arrResult);
		for($index=0;$index < $count;$index++)
		{
			//print_r($statuses[$arrResult[$index][global_mapping::TypeID]]);
			if( $statuses[$arrResult[$index][global_mapping::TypeID]])
			{
				$pathCode = $statuses[$arrResult[$index][global_mapping::TypeID]][global_mapping::ExtraInfo];
				//echo$arrResult[$index][global_mapping::ProductLink];
				try
				{
					$arrResult[$index][global_mapping::Price] = global_common::getPriceFromURL($arrResult[$index][global_mapping::ProductLink],$pathCode);
				}
				catch(Exception $ex)
				{
					//$arrResult[$index]
				}
			}
		}
		//print_r($arrResult);
		return $arrResult;
	}
	
	
	public function getAllProductPrice($intPage = 0,$selectField='*',$whereClause='',$orderBy='') 
	{		    
		$selectField = $selectField? $selectField : '*'; 
		if($whereClause)
		{
			$whereClause = ' WHERE '.$whereClause;
		}
		
		if($orderBy)
		{
			$orderBy = ' ORDER BY '.$orderBy;
		}
		if($intPage>0)
		{
			$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
					array($selectField, Model_ProductPrice::TBL_SL_PRODUCT_PRICE ,							
						$whereClause.$orderBy .' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
		}
		else
		{
			$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
					array($selectField, Model_ProductPrice::TBL_SL_PRODUCT_PRICE ,							
						$whereClause.$orderBy ));
		}
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get All sl_product_price:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult;
	}
	
	public function getListProductPrice($intPage,$orderBy='ProductPriceID', $whereClause)
	{		
		if($whereClause)
		{
			$whereClause='WHERE'+ $whereClause;						
		}
		if($orderBy)
		{
			$orderBy='ORDER BY'+ $orderBy;						
		}
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_PRODUCT_PRICE,$orderBy.' '.$whereClause.' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
		//echo 'sql:'.$strSQL;	
		$arrResult = $this->_objConnection->selectCommand($strSQL);
		//print_r($arrResult);
		$strHTML = '<table class="tbl-list">
				<thead>
				<td>ProductPriceID</td>
				<td>ProductID</td>
				<td>Retailer</td>
				<td>ProductLink</td>
				<td>TypeID</td>
				<td>Order</td>
				<td>StatusID</td>
				<td>Status</td>
				</thead>
				<tbody>';
		$icount = count($arrmenu);
		for($i=0;$i<$icount;$i++)
		{
			$strHTML.='<tr class="'.($i%2==0?'even':'odd').'">
					<td>'.$arrResult[$i]['ProductPriceID'].'</td>
					<td>'.$arrResult[$i]['ProductID'].'</td>
					<td>'.$arrResult[$i]['Retailer'].'</td>
					<td>'.$arrResult[$i]['ProductLink'].'</td>
					<td>'.$arrResult[$i]['TypeID'].'</td>
					<td>'.$arrResult[$i]['Order'].'</td>
					<td>'.$arrResult[$i]['StatusID'].'</td>
					<td class="lastCell">'.$arrResult[$i]['Status'].'</td>
					</tr>';
		}
		$strHTML.='</tbody></table>';
		
		$strHTML .= "<div>".global_common::getPagingHTMLByNum($intPage,self::NUM_PER_PAGE,global_common::getTotalRecord(self::TBL_SL_PRODUCT_PRICE,$this->_objConnection),
				"_objMenu.changePage")."</div>";
		return $strHTML;
	}
	
	#endregion   
}
?>