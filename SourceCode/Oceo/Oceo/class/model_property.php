<?php
/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012 
 *
 */

/* <summary>
 * Implementations of slpropertys represent a Property
 * </summary>
 */
class Model_Property
{		   
	#region PRESERVE ExtraMethods For Property
	#endregion
    #region Contants	
    const ACT_ADD							= 10;
    const ACT_UPDATE						= 11;
    const ACT_DELETE						= 12;
    const ACT_CHANGE_PAGE					= 13;
    const ACT_SHOW_EDIT                     = 14;
    const ACT_GET                           = 15;
    const NUM_PER_PAGE                      = 15; 
    
    const TBL_SL_PROPERTY			            = 'sl_property';

	const SQL_INSERT_SL_PROPERTY		= 'INSERT INTO `{0}`
		(
			PropertyID,
			PropertyGroupID,
			PropertyName,
			PropertyValue,
			DataTypeID,
			`Order`,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate,
			DeletedBy,
			DeletedDate,
			IsDeleted,
			`Status`
        )
        VALUES (
		\'{1}\', \'{2}\', \'{3}\', \'{4}\', \'{5}\', \'{6}\', \'{7}\', \'{8}\', \'{9}\', \'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\'
        );';
        
	const SQL_UPDATE_SL_PROPERTY		= 'UPDATE `{0}`
		SET  
			`PropertyID` = \'{1}\',
			`PropertyGroupID` = \'{2}\',
			`PropertyName` = \'{3}\',
			`PropertyValue` = \'{4}\',
			#`DataTypeID` = \'{5}\',
			`Order` = \'{6}\',
			#`CreatedBy` = \'{7}\',
			#`CreatedDate` = \'{8}\',
			`ModifiedBy` = \'{9}\',
			`ModifiedDate` = \'{10}\',
			#`DeletedBy` = \'{11}\',
			#`DeletedDate` = \'{12}\',
			#`IsDeleted` = \'{13}\',
			`Status` = \'{14}\'
			
		WHERE `PropertyID` = \'{1}\'  ';
		   

    const SQL_CREATE_TABLE_SL_PROPERTY		= 'CREATE TABLE `{0}` (

			`PropertyID` ,
			`PropertyGroupID` ,
			`PropertyName` varchar(50),
			`PropertyValue` varchar(255),
			`DataTypeID` varchar(20),
			`Order` ,
			`CreatedBy` ,
			`CreatedDate` ,
			`ModifiedBy` ,
			`ModifiedDate` ,
			`DeletedBy` ,
			`DeletedDate` ,
			`IsDeleted` ,
			`Status` varchar(20),
			PRIMARY KEY(PropertyID)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';
	
    #endregion   
    
    #region Variables
	var $_objConnection;
	#end region
	
	#region Contructors
	/**
	*  Phuong th?c kh?i t?o d?i tu?ng faq d?ng th?i t?o connection d?n db
	*
	* @param object $objConnection ??i tu?ng k?t n?i d?n db
			
	* @return void 
	*
	*/
	public function  Model_Property($objConnection)
	{
		$this->_objConnection = $objConnection;
		
	}
    #region
    
    #region Public Functions
    
	public function insert($propertyGroupID, $propertyname,$propertyvalue,$datatypeid,$order,$createdby,$status)
	{		
		$strTableName = self::TBL_SL_PROPERTY;
		$intID = global_common::getMaxValueofField($this->_objConnection,global_mapping::PropertyID, $strTableName) + 1;
		$strSQL = global_common::prepareQuery(self::SQL_INSERT_SL_PROPERTY,
				array(self::TBL_SL_PROPERTY,$intID,
						global_common::escape_mysql_string($propertyGroupID),
						global_common::escape_mysql_string($propertyname),
						global_common::escape_mysql_string($propertyvalue),
						global_common::escape_mysql_string($datatypeid),
						global_common::escape_mysql_string($order),
						global_common::escape_mysql_string($createdby),
						global_common::nowSQL(),
						global_common::escape_mysql_string($modifiedby),
						global_common::escape_mysql_string($modifieddate),
						global_common::escape_mysql_string($deletedby),
						global_common::escape_mysql_string($deleteddate),
						global_common::escape_mysql_string($isdeleted),
						global_common::escape_mysql_string($status)
                ));
		//echo $strSQL;
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_PROPERTY,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add sl_property:'.$strSQL,1);
			return false;
		}	
		return $intID;
		
	}
    
    public function update($propertyid,$propertyGroupID,$propertyname,$propertyvalue,$datatypeid,$order,$modifiedby,$status)
	{
		$strTableName = self::TBL_SL_PROPERTY;
		$strSQL = global_common::prepareQuery(self::SQL_UPDATE_SL_PROPERTY,
				array($strTableName,
						global_common::escape_mysql_string($propertyid),
						global_common::escape_mysql_string($propertyGroupID),
						global_common::escape_mysql_string($propertyname),
						global_common::escape_mysql_string($propertyvalue),
						global_common::escape_mysql_string($datatypeid),
						global_common::escape_mysql_string($order),
						global_common::escape_mysql_string($createdby),
						global_common::escape_mysql_string($createddate),
						global_common::escape_mysql_string($modifiedby),
						global_common::nowSQL(),
						global_common::escape_mysql_string($deletedby),
						global_common::escape_mysql_string($deleteddate),
						global_common::escape_mysql_string($isdeleted),
						global_common::escape_mysql_string($status)
                ));
		
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_PROPERTY,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add sl_property:'.$strSQL,1);
			return false;
		}	
		return $propertyid;		
	}
 
    public function getPropertyByID($objID,$selectField='*') 
	{		
		$selectField = $selectField? $selectField : '*'; 
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_PROPERTY ,							
					'WHERE PropertyID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_property ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult[0];
	}
    
	public function getPropertyByProduct($productID,$typeID, $selectField='*') 
	{		
		$selectField = $selectField? $selectField : '*'; 
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_ProductProperty::TBL_SL_PRODUCT_PROPERTY ,							
					'WHERE ProductID = \''.$productID.'\' and TypeID = \''.$typeID.'\' order by `Order` '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			
			global_common::writeLog('get sl_property ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		$arrPropertyIDs = global_common::getArrayColumn($arrResult,global_mapping::PropertyID);
		$temp = array();
		foreach($arrResult as $key => $info)
		{
			$temp[$info[global_mapping::PropertyID]]=$info;
			unset($arrResult[$key]);
		}	
		$arrResult = $temp;
		$properties = $this->getPropertyByIDs($arrPropertyIDs);
		$count = count($properties);
		
		for($i=0; $i < $count; $i++)
		{
			$properties[$i][global_mapping::PropertyValue] = $arrResult[$properties[$i][global_mapping::PropertyID]][global_mapping::PropertyValue];
			$properties[$i][global_mapping::Order] = $arrResult[$properties[$i][global_mapping::PropertyID]][global_mapping::Order];
			$properties[$i][global_mapping::TypeID] = $arrResult[$properties[$i][global_mapping::PropertyID]][global_mapping::TypeID];
			$properties[$i][global_mapping::Status] = $arrResult[$properties[$i][global_mapping::PropertyID]][global_mapping::Status];
		}
		//print_r($arrResult);
		return $properties;
	}
	
    public function getPropertyByCat($catID, $groupID,&$total) 
	{		
	   $sqlSearch = '1=1';
       if($catID)
       {
            $sqlSearch.= ' And '. global_mapping::ArticleTypeID.'=\''.$catID.'\'';
       }
       
       if($groupID)
       {            
            $sqlSearch.= 'AND'. global_mapping::PropertyGroupID.'=\''.$groupID.'\'';                    
       }
       
	   $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array('*', Model_PropertyGroup::TBL_SL_PROPERTY_GROUP,							
					'WHERE '.$sqlSearch.'  Order by `'.global_mapping::Order.'`'));
	//	echo $strSQL;
		
		$arrResult =$this->_objConnection->selectCommand($strSQL);	
		if(!$arrResult)
		{
			global_common::writeLog('get sl_product ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		else
		{
			//print_r($arrResult);
			$groupIDs = global_common::getArrayColumn($arrResult,global_mapping::PropertyGroupID); 
			$groupIDs = array_unique($groupIDs);
			//print_r($groupIDs);
		
			$objPropertyGroup = new Model_PropertyGroup($this->_objConnection);
			
			$properties = $this->getPropertyGroupByIDs($groupIDs);
            $total = count($properties);
            //print_r($properties);
			$propertyGroups = $objPropertyGroup->getPropertyGroupByIDs($groupIDs);
			
			$temp = array();
			foreach($arrResult as $key => $info)
			{
				$temp[$info[global_mapping::PropertyID]]=$info;
				unset($arrResult[$key]);				
			}	
			$arrResult = $temp;
			$temp = array();
			foreach($groupIDs as $item)
			{
				foreach($propertyGroups as $subitem)
				{
					if($item == $subitem[global_mapping::PropertyGroupID])
					{
						//echo $item.':';
						$temp  = array_merge($temp, array($subitem));
					}
				}
			}
			$propertyGroups = $temp;
			
			//print_r($arrResult);
			//print_r($propertyGroups);
			$count = count($propertyGroups);
			//print_r($properties);
            
			for($i=0; $i < $count; $i++)
			{
			    
				foreach($properties as $item)
				{
					if($item[global_mapping::PropertyGroupID] == $propertyGroups[$i][global_mapping::PropertyGroupID])
					{
						//change defaut value  to product property value					
						//$item[global_mapping::Status] = $arrResult[$item[global_mapping::PropertyID]][global_mapping::Status];
						//$item[global_mapping::TypeID] = $arrResult[$item[global_mapping::PropertyID]][global_mapping::TypeID];
						//$item[global_mapping::StatusID] = $arrResult[$item[global_mapping::PropertyID]][global_mapping::StatusID];
						//$item[global_mapping::Order] = $arrResult[$item[global_mapping::PropertyID]][global_mapping::Order];
                        if(count($propertyGroups[$i]['Properties']) >0)
                        {
                            array_push($propertyGroups[$i]['Properties'], $item);                          
                        }
                        else
                        {
                            $propertyGroups[$i]['Properties'] =  array($item);
                        }
						$propertyGroups[$i]['Properties'] = $propertyGroups[$i]['Properties']? : array($item);
						//$propertyGroups[$i]['Properties'] = array_push($propertyGroups[$i]['Properties'], array($item));
                      //  print_r($propertyGroups[$i]);
                      
					}
				}
			}
		}
		//print_r($propertyGroups[0]);
	//	print_r($propertyGroups);
		return $propertyGroups;
	}
	
    
	public function getPropertyByIDs($arrIDs) 
	{		
		$arrIDs = global_common::splitString($arrIDs);
		$strQueryIN = global_common::convertToQueryIN($arrIDs);
		$whereClause = 'WHERE '.global_mapping::PropertyID.' IN ('.$strQueryIN.')';
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_PROPERTY,$whereClause.' order by `Order`'));
		//echo $strSQL;
		$properties =  $this->_objConnection->selectCommand($strSQL);	
		
		if(!$properties)
		{
			global_common::writeLog('get getPropertyByIDs:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		
		//print_r($arrResult);
		return $properties;
	}
	
    public function getPropertyGroupByIDs($arrGroupIDs) 
	{		
		$arrGroupIDs = global_common::splitString($arrGroupIDs);
		$strQueryIN = global_common::convertToQueryIN($arrGroupIDs);
		$whereClause = 'WHERE '.global_mapping::PropertyGroupID.' IN ('.$strQueryIN.')';
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_PROPERTY,$whereClause.' order by `Order`'));
		//echo $strSQL;
		$properties =  $this->_objConnection->selectCommand($strSQL);	
		
		if(!$properties)
		{
			global_common::writeLog('get getPropertyByIDs:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		
		//print_r($arrResult);
		return $properties;
	}
    
	public function getPropertyByName($groupID,$propertyName,$selectField='*') 
	{		
		$selectField = $selectField? $selectField : '*'; 
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_PROPERTY ,							
					'WHERE '.global_mapping::PropertyGroupID.' = \''.$groupID.'\' and '.global_mapping::PropertyName.' = \''.$propertyName.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_property ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult[0];
	}
	
    public function getAllProperty($intPage = 0,$selectField='*',$whereClause='',$orderBy='') 
	{		
        if($whereClause)
		{
			$whereClause = ' WHERE '.$whereClause;
		}
		
		if($orderBy)
		{
			$orderBy = ' ORDER BY '.$orderBy;
		}
        if($intPage>0)
        {
		    $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_Property::TBL_SL_PROPERTY ,							
					$whereClause.$orderBy .' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
        }
        else
        {
            $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_Property::TBL_SL_PROPERTY ,							
					$whereClause.$orderBy ));
        }
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get All sl_property:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		
		$objDataType = new Model_Datatype($this->_objConnection);
		
		$allDataType = $objDataType->getAllDatatype();
		$dataTypes = array();
		foreach($allDataType as $key => $info)
		{
			$dataTypes[$info[global_mapping::DataTypeID]]=$info;
			unset($dataTypes[$key]);
		}	
		
		$count = count($arrResult);
		for($index=0;$index < $count;$index++)
		{
			$arrResult[$index][global_mapping::DataTypeID] = $dataTypes[$arrResult[$index][global_mapping::DataTypeID]];
		}
		//print_r($arrResult);
		return $arrResult;
	}
    
    public function getListProperty($intPage,$orderBy='PropertyID', $whereClause)
	{		
        if($whereClause)
        {
            $whereClause='WHERE'+ $whereClause;						
        }
        if($orderBy)
        {
            $orderBy='ORDER BY'+ $orderBy;						
        }
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_PROPERTY,$orderBy.' '.$whereClause.' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
		//echo 'sql:'.$strSQL;	
		$arrResult = $this->_objConnection->selectCommand($strSQL);
		//print_r($arrResult);
		$strHTML = '<table class="tbl-list">
                    <thead>
						<td>PropertyID</td>
						<td>PropertyName</td>
						<td>PropertyValue</td>
						<td>DataTypeID</td>
						<td>Order</td>
						<td>CreatedBy</td>
						<td>CreatedDate</td>
						<td>ModifiedBy</td>
						<td>ModifiedDate</td>
						<td>DeletedBy</td>
						<td>DeletedDate</td>
						<td>IsDeleted</td>
						<td>Status</td>
                    </thead>
                    <tbody>';
		$icount = count($arrmenu);
		for($i=0;$i<$icount;$i++)
		{
			$strHTML.='<tr class="'.($i%2==0?'even':'odd').'">
						<td>'.$arrResult[$i]['PropertyID'].'</td>
						<td>'.$arrResult[$i]['PropertyName'].'</td>
						<td>'.$arrResult[$i]['PropertyValue'].'</td>
						<td>'.$arrResult[$i]['DataTypeID'].'</td>
						<td>'.$arrResult[$i]['Order'].'</td>
						<td>'.$arrResult[$i]['CreatedBy'].'</td>
						<td>'.$arrResult[$i]['CreatedDate'].'</td>
						<td>'.$arrResult[$i]['ModifiedBy'].'</td>
						<td>'.$arrResult[$i]['ModifiedDate'].'</td>
						<td>'.$arrResult[$i]['DeletedBy'].'</td>
						<td>'.$arrResult[$i]['DeletedDate'].'</td>
						<td><input type="checkbox" onclick="_objProperty.showHide(\''.$arrResult[$i]['PropertyID'].'\',\''.$arrResult[$i]['name'].'\',this)" '.($arrResult[$i]['IsDeleted']?'':'checked=checked').' /></td>
						<td class="lastCell">'.$arrResult[$i]['Status'].'</td>
					  </tr>';
		}
		$strHTML.='</tbody></table>';
		
		$strHTML .= "<div>".global_common::getPagingHTMLByNum($intPage,self::NUM_PER_PAGE,global_common::getTotalRecord(self::TBL_SL_PROPERTY,$this->_objConnection),
				"_objMenu.changePage")."</div>";
		return $strHTML;
	}
    
    #endregion   
}
?>